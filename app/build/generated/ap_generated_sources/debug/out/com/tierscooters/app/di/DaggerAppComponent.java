// Generated by Dagger (https://dagger.dev).
package com.tierscooters.app.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.tierscooters.app.BaseApplication;
import com.tierscooters.app.BaseFragment_MembersInjector;
import com.tierscooters.app.di.main.MainFragmentBuildersModule_ContributeMainFragment;
import com.tierscooters.app.di.main.MainFragmentBuildersModule_ContributePostsFragment;
import com.tierscooters.app.di.main.MainModule_ProvideMainApiFactory;
import com.tierscooters.app.network.main.MainApi;
import com.tierscooters.app.ui.main.MainActivity;
import com.tierscooters.app.ui.main.MainActivity_MembersInjector;
import com.tierscooters.app.ui.main.MainViewModel;
import com.tierscooters.app.ui.main.MainViewModel_Factory;
import com.tierscooters.app.ui.main.main.MainFragment;
import com.tierscooters.app.ui.main.main.MainPageViewModel;
import com.tierscooters.app.ui.main.main.MainPageViewModel_Factory;
import com.tierscooters.app.ui.main.vehicles.VehiclesFragment;
import com.tierscooters.app.ui.main.vehicles.VehiclesViewModel;
import com.tierscooters.app.ui.main.vehicles.VehiclesViewModel_Factory;
import com.tierscooters.app.viewmodels.ViewModelProviderFactory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Retrofit> provideRetrofitInstanceProvider;

  private DaggerAppComponent(Application applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideRetrofitInstanceProvider = DoubleCheck.provider(AppModule_ProvideRetrofitInstanceFactory.create(applicationProvider));
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory> mainFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuildersModule_ContributePostsFragment.VehiclesFragmentSubcomponent.Factory> vehiclesFragmentSubcomponentFactoryProvider;

    private Provider<MainApi> provideMainApiProvider;

    private Provider<VehiclesViewModel> vehiclesViewModelProvider;

    private Provider<MainPageViewModel> mainPageViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(MainFragment.class, (Provider) mainFragmentSubcomponentFactoryProvider).put(VehiclesFragment.class, (Provider) vehiclesFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3).put(MainViewModel.class, (Provider) MainViewModel_Factory.create()).put(VehiclesViewModel.class, (Provider) vehiclesViewModelProvider).put(MainPageViewModel.class, (Provider) mainPageViewModelProvider).build();
    }

    private ViewModelProviderFactory viewModelProviderFactory() {
      return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.mainFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory get(
            ) {
          return new MainFragmentSubcomponentFactory();
        }
      };
      this.vehiclesFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributePostsFragment.VehiclesFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributePostsFragment.VehiclesFragmentSubcomponent.Factory get(
            ) {
          return new VehiclesFragmentSubcomponentFactory();
        }
      };
      this.provideMainApiProvider = DoubleCheck.provider(MainModule_ProvideMainApiFactory.create(DaggerAppComponent.this.provideRetrofitInstanceProvider));
      this.vehiclesViewModelProvider = VehiclesViewModel_Factory.create(provideMainApiProvider);
      this.mainPageViewModelProvider = MainPageViewModel_Factory.create(provideMainApiProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
      return instance;
    }

    private final class MainFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent create(
          MainFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MainFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MainFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent {
      private MainFragmentSubcomponentImpl(MainFragment arg0) {

      }

      @Override
      public void inject(MainFragment arg0) {
        injectMainFragment(arg0);
      }

      private MainFragment injectMainFragment(MainFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, MainActivitySubcomponentImpl.this.viewModelProviderFactory());
        return instance;
      }
    }

    private final class VehiclesFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributePostsFragment.VehiclesFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributePostsFragment.VehiclesFragmentSubcomponent create(
          VehiclesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new VehiclesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class VehiclesFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributePostsFragment.VehiclesFragmentSubcomponent {
      private VehiclesFragmentSubcomponentImpl(VehiclesFragment arg0) {

      }

      @Override
      public void inject(VehiclesFragment arg0) {
        injectVehiclesFragment(arg0);
      }

      private VehiclesFragment injectVehiclesFragment(VehiclesFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, MainActivitySubcomponentImpl.this.viewModelProviderFactory());
        return instance;
      }
    }
  }
}
